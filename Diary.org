* Diary
  
** Nov. 8

*** Idea.1
   - 実行可能タスク: 大変さ(max(d_{i})) が小さい順に取り出す
   - チームメンバー: 重みが大きいほど優秀。重み: タスクの大変さ(max(d_{i})) * かかった日数
**** Score
	79973

*** Idea.2
   - 実行可能タスク: 大変さ(max(d_{i})) が大きい順に優秀な人に割り当てる
   - チームメンバー: 重みが大きいほど優秀。重み: タスクの大変さ(max(d_{i})) * かかった日数
**** Score
	78822

*** Idea.3
   - チームメンバーの評価を適宜リセットする
**** Score
	77427 (小さい順に取り出す && 評価リセット50日ごと)

** Nov. 9

*** Idea. 4
	- 依存数の多いタスクを優先的に取り出す

**** Score
	 78405（依存数が多い順 -> 大変さが大きい順に取り出す）
	 1000 case: 1601274

**** Score
	 上 + 50日ごとに評価リセット
	 1000 case: 1578002

** Nov. 10

*** Idea. 5
	実行可能タスクの取り出す順番を (max(d_{i}) * 依存されているタスク数)の大きい順

**** Score
	 1000 case: 1578455
	 
*** Idea. 6
	実行可能タスクを取り出す順番 max(d_{i})が大きい順 -> 依存されているタスク数が多い順

**** Score
	 1000 case: 1618670

*** Idea. 7
	実行可能タスクを取り出す順番 max(d_{i})が小さい順 -> 依存されているタスク数が多い順

**** Score
	 1000 case: 1645048

** Nov. 11

*** Idea. 8
	実行可能タスクの重み：max(d_{i}) -> ave(d_{i}) が小さい順

**** Score
	 1000 case: 1654915
	 Test case: 80702

**** Memo
	 スキルレベルが大きいもの -> 小さいものになるように実行されてしまった

*** Idea. 9
	実行可能タスクの重み：max(d_{i}) -> median(d_{i}) が小さい順

**** Score
	 1000 case: 1644924

*** Idea. 10
   実行可能タスクの重み：max(d_{i}) -> median(d_{i}) が大きい順

**** Score
	 1000 case: 1606380

*** Idea. 11
   実行可能タスクの重み：ave(d_{i}) * 依存しているタスク数 が小さい順

**** Score
	 1000 case: 1727023

*** Idea. 12
   実行可能タスクの重み：ave(d_{i}) * 依存しているタスク数 が大きい順

**** Score
	 1000 case: 1595091
	 
*** Idea. 13
   メンバーの能力に初期値をもうける

**** Score
	 1000 case: 1724559

**** Memo
	 タスクレベルをバラけさせることが重要そう
	 最初はバラけているが途中で全員で重めのタスクに取り組んでいる

*** Idea. 14 (Highest)
    依存しているタスク数 -> 依存しているタスク数の重みの合計値
	取り出す順番は 依存しているタスク数 * タスクの重み　が小さい順

**** Score
	 1000 case: 1730898 (init_step=3.0)
	 1731241 (init_step=5.0)
	 1730727 (init_step=7.0)
	 大きい順に取り出す: 1589694
	 

	 
*** Idea. 15
    タスクの取り出す順番: タスクの重み * 依存しているタスク数の重みの合計値 -> 依存しているタスク数の重みの合計値 * 依存しているタスク数が小さい順

**** Score
	 1000 case: 1723330
